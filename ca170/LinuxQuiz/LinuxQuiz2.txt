 What is the environment variable $PATH? 
a variable that contains a colon seperated list of all the paths ("$PATH") to programs on the system

 Show me the value of $PATH 
for me it is : -bash: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/WINDOWS/system32:/mnt/c/WINDOWS:/mnt/c/WINDOWS/System32/Wbem:/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0/:/mnt/c/WINDOWS/System32/OpenSSH/:/mnt/c/Program: No such file or directory

 Find what directory "ls" is in. 
using "which ls" to find it in : /usr/bin/ls ("which ____ allows you to search for a directory or file")

 Show the file size of the "ls" program. 
using command "ls -lh /usr/bin/ls" shows me 139k size ("ls -lh /root/dir/file" = check size of a certain file/directory in kbs)

 Two programs, in different directories, have the same name. One is a system program. The other is a script that you wrote. What happens when you type that name? 
usually the systems program will run ( system program takes precedent over script file)

 In the previous, if you find the system program is running when you type that name, how can you make sure that your program runs instead? 
add the directory of the script you want to run to the PATH variable before the path of the directory of the system program for it to run (this specifies the location of the file you want to run instead of the system file, System file has precedent)

 EXTRA QUESTION (only for experienced Linux people): Get the value of $PATH and translate all the ":" characters to newline characters. 


 Issuing the command gedit will do what? 
open the GNOME test editor in a new window, logs, warnings and error messages appear in terminal and program keeps a hold on the terminal so it cannot take any more input

 Issuing the command gedit & will do what? 
open the GNOME test editor in a new window , logs, warnings and error messages appear in terminal but app is forked into the background so terminal is still available to take input

 What is the effect of the following Linux command? ls -al > myfile 
adds the names of all the contents (ls -al) of the current directory to a file called "myfile" (> myfile)

 What will this do? cd ls -alR 
change to home directory ("cd"), then list all the contents of the user's home directory recursively (including children of those directories) in long format. (al = list all contents of the users home directory) (R = recursively)

 What will this do? cd / ls -alR 
change to root directory ("cd / ") then list all the contents ("ls -al") of the root directory recursively ("R") (list all the files and folders in the whole system, open every file and folder)

 What will this do? cd / ls -al > outputfile.log 
changes directory to root directory, then makes a file called "outputfile.log" which contains a list of all the files in the root directory in long format (if the user has permission) (ls -al = list the names of all the files in current directory, in long format) 

 What will this do? cd / ls -al > $HOME/outputfile.log 
changes directory to root directory, then makes a file in users home directory ($HOME) called "outputfile.log" (if user has permissions) which contains a list of all the files in the root directory in long format in the file.

 Typing the command man man > man does what? 
makes a file in the current directory called "man" (> man) which contains the manual page (man) for the "man" command

